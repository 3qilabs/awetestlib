$: << './lib'

$begin_time = Time.now
$base_time  = Time.now
$load_times = Hash.new
$capture_load_times = true if ENV['AWETESTLIB-LOAD-TIMES']

require File.join(File.dirname(__FILE__), 'awetestlib-helpers')
require 'fileutils'

if ENV['RUBY-PROF']
  require 'ruby-prof'
end

if ARGV[0].nil?
  print_usage
else

  require 'optparse'
  require 'awetestlib'

  options = {}

  parse_script_type(options)

  OptionParser.new do |opts|
    opts.banner = "Usage: awetestlib <script_file> [options]"

    opts.on("-b BROWSER", "--browser BROWSER", "Specify a browser by abbreviation (IE, FF, S, C) Required.") do |browser|
      options[:browser] = browser
    end
    opts.on("-d", "--debug", "Run debugger on first script failure") do
      options[:debug_on_fail] = true
    end
    opts.on("-e ENVIRONMENT_URL", "--environment_url ENVIRONMENT_URL", "Specify the environment URL") do |environment_url|
      options[:environment_url] = environment_url
    end
    opts.on("-f ENVIRONMENT_NODENAME", "--environment_node_name ENVIRONMENT_NODENAME", "Specify the environment node name") do |node_name|
      options[:environment_nodename] = node_name
    end
    opts.on("-l LIBRARY", "--library LIBRARY", "Specify a library to be loaded") do |library|
      options[:library] = library.to_s
    end
    opts.on("-m RUN_MODE", "--run_mode RUN_MODE", "Specify the run mode: local, local_zip, remote_zip") do |run_mode|
      options[:run_mode] = run_mode
    end
    opts.on("-n ENVIRONMENT_NAME", "--environment_name ENVIRONMENT_NAME", "Specify the environment name") do |environment_name|
      options[:environment_name] = environment_name
    end
    opts.on("-o", "--output_to_log", "Write to log file") do
      options[:output_to_log] = true
    end
    opts.on("-p", "--pry", "Require Pry for debugging") do
      options[:pry] = true
    end
    opts.on("-r ROOT_PATH", "--root_path ROOT_PATH", "Specify the root path") do |root_path|
      options[:root_path] = root_path
    end
    opts.on("-s SCREENCAP_PATH", "--screencap-path SCREENCAP_PATH", "Specify the path where screenshots will be saved") do |screencap_path|
      options[:screencap_path] = screencap_path
    end
    opts.on("-t LOCATE_TIMEOUT", "--locate_timeout LOCATE_TIMEOUT", "Set timeout for locating DOM elements.") do |seconds|
      options[:locate_timeout] = seconds
    end
    opts.on("-u SELENIUM_REMOTE_URL", "--selenium_remote_url SELENIUM_REMOTE_URL", "Specify the device's remote url and port") do |remote_url|
      options[:remote_url] = remote_url
    end
    opts.on("-v VERSION", "--version VERSION", "Specify a browser version") do |version|
      options[:version] = version
    end
    opts.on("-x EXCEL_FILE", "--excel EXCEL_FILE", "Specify an excel file containing variables to be loaded") do |xls_path|
      options[:xls_path] = xls_path
    end
    opts.on("-E EMULATOR", "--emulator EMULATOR", "Mobile emulator image (avd)") do |emulator|
      options[:emulator] = emulator
    end
    opts.on("-T DEVICE_TYPE", "--device_type DEVICE_TYPE", "Mobile device type (ipad, iphone)") do |device_type|
      options[:device_type] = device_type
    end
    opts.on("-I DEVICE_ID", "--device_id DEVICE_ID", "Mobile device identifier 'UDID'") do |device_id|
      options[:device_id] = device_id
    end
    opts.on("-K SDK", "--sdk SDK", "Mobile native sdk") do |sdk|
      options[:sdk] = sdk
    end
    opts.on("-P PLATFORM", "--platform PLATFORM", "Mobile or desktop platform: Android, iOS, Windows, or Mac") do |platform|
      options[:platform] = platform
    end
    opts.on("-S LOG_PATH_SUBDIR", "--log_path_subdir LOG_PATH_SUBDIR", "Specify log path relative to root_path.") do |log_path_subdir|
      options[:log_path_subdir] = log_path_subdir
    end
    opts.on("-R", "--report_all_test_refs", "Include report of all error/test case reference ids actually validated.") do
      options[:report_all_test_refs] = true
    end
    opts.on("-D", "--global_debug", "Set all global debug variables to true. ($DEBUG, $debug, $Debug") do
      options[:global_debug] = true
    end
    opts.on("-L", "--capture_load_times", "Capture load time for gem requires.") do
      options[:capture_load_times] = true
    end
    opts.on("-h", "--help", "Awetestlib options:") do
      puts opts
      exit
    end

  end.parse!

  unless options[:browser]
    puts "Missing -b/--browser option.  We can't test a browser without knowing which one..."
    # puts opts
    exit
  end

  options[:environment]             ||= {}
  options[:environment]['name']     = options[:environment_name]
  options[:environment]['url']      = options[:environment_url]
  options[:environment]['nodename'] = options[:environment_nodename]

  options[:log_path_subdir]         = 'logs' if options[:output_to_log] and not options[:log_path_subdir]

  $watir_script       = options[:classic_watir]
  $capture_load_times = options[:capture_load_times] unless $capture_load_times

  IS_WIN_2008 = File.exists?('config/win2008.txt')
  Awetestlib::Runner.new(options)


end
